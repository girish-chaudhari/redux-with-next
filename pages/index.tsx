import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { useEffect, useRef, useState } from "react";
import getStore, {
  getPokemon,
  selectFilteredPokemon,
  selectSearch,
  setSearch,
} from "../src/store";
import { useDispatch, useSelector } from "react-redux";

const Home: NextPage = () => {
  const [data, setData] = useState<any>([]);
  const [page, setPage] = useState(1);
  const targetRef = useRef<HTMLDivElement>(null);
  const dispatch = useDispatch();

  const pokemon = useSelector(selectFilteredPokemon);
  const search = useSelector(selectSearch);
  let a = 0;
  let b = 10;

  const moredata = (entries: any) => {
    if (entries[0].isIntersecting) {
      let countPage = page + 1;
      console.log("countPage", countPage);
      a = a + 10;
      b = b + 10;
      let dataview = pokemon.slice(a, b);
      setData((prev) => [...prev, ...dataview]);
      // setPage(countPage);
    }
  };

  useEffect(() => {
    const observer = new IntersectionObserver(moredata, {
      threshold: 0.1,
    });
    observer.observe(targetRef.current);
    console.log();
    console.log(page);
  }, [targetRef]);

  useEffect(() => {
    setData(pokemon.slice(0, 10));
    console.log(data);
  }, []);

  return (
    <div className={styles.main}>
      <Head>
        <title>Pokemon</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <input
          type="text"
          value={search}
          onChange={(e) => {
            dispatch(setSearch(e.target.value));
          }}
          className={styles.search}
        />
      </div>
      <div className={styles.container}>
        {data.map((p, i) => (
          <div key={i} className={styles.image}>
            <img
              alt={p.name}
              src={`https://jherr-pokemon.s3.us-west-1.amazonaws.com/${p.image}`}
            />
            <h2>{p.name}</h2>
          </div>
        ))}
        <div ref={targetRef} />
      </div>
    </div>
  );
};

export default Home;

export async function getServerSideProps() {
  const store = getStore();
  await store.dispatch(getPokemon());
  return {
    props: {
      initialState: store.getState(),
    },
  };
}
